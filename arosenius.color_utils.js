var _ = require('underscore');
var chroma = require('chroma-js');
var Canvas = require('canvas');
var colorThief = require('thief');
var fs = require('fs');

module.exports = {
	extractColors: function(filePath) {
		console.log(filePath);
		if (fs.existsSync(filePath)) {
			console.log('found!');
			var imageData = fs.readFileSync(filePath);
			var image = new Canvas.Image;
			image.src = imageData;

			var canvas = new Canvas(image.width, image.height);
			var ctx = canvas.getContext('2d');

			console.log('ctx.drawImage');

			ctx.drawImage(image, 0, 0, image.width, image.height);

			var imageColors3 = _.map(colorThief.createPalette(canvas, 3), _.bind(function(color) {
					return this.colorObject(color);
			}, this));
			var imageColors5 = _.map(colorThief.createPalette(canvas, 5), _.bind(function(color) {
					return this.colorObject(color);
			}, this));
			var imageColors8 = _.map(colorThief.createPalette(canvas, 8), _.bind(function(color) {
					return this.colorObject(color);
			}, this));
			var dominantColor = this.colorObject(colorThief.getDominantColor(canvas));

			var colorData = {
				dominant: dominantColor,
				colors: {
					three: imageColors3,
					five: imageColors5,
					five_mapped: _.map(imageColors5, _.bind(function(color) {
						var mappedColor = this.mapColorToPalette(color.rgb);

						return this.colorObject(mappedColor);
					}, this)),
					eight_mapped: _.map(imageColors8, _.bind(function(color) {
						var mappedColor = this.mapColorToPalette(color.rgb);

						return this.colorObject(mappedColor);
					}, this)),
				}
			};

			return colorData;
		}
		else {
			return undefined;
		}
	},

	colorObject: function(color) {
		var hex = chroma(color).hex();
		var hsv = chroma(color).hsv();
		var temperature = chroma(color).temperature();

		return {
			rgb: color,
			hex: hex,
			hsv: {
				h: !hsv[0] || hsv[0] == null || typeof hsv[0] === 'null' || Math.round(hsv[0]) == null ? 0 : Math.round(hsv[0]), 
				s: !hsv[1] || hsv[1] == null || typeof hsv[1] === 'null' || Math.round(hsv[1]*100) == null ? 0 : Math.round(hsv[1]*100), 
				v: !hsv[2] || hsv[2] == null || typeof hsv[2] === 'null' || Math.round(hsv[2]*100) == null ? 0 : Math.round(hsv[2]*100)
			},
			temperature: temperature
		};
	},

	mapColorToPalette: function(colorToMap) {
		var color, diffR, diffG, diffB, diffDistance, mappedColor;
		var distance = 25000;

		for (var i = 0; i < this.colors216.length; i++) {
			color = this.colors216[i];
			diffR = (color[0] - colorToMap[0]);
			diffG = (color[1] - colorToMap[1]);
			diffB = (color[2] - colorToMap[2]);
			diffDistance = diffR * diffR + diffG * diffG + diffB * diffB;
			if (diffDistance < distance) {
				distance = diffDistance;
				mappedColor = this.colors216[i];
			};
		}
		return (mappedColor);
	},

	colors216: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			51
		],
		[
			0,
			0,
			102
		],
		[
			0,
			0,
			153
		],
		[
			0,
			0,
			204
		],
		[
			0,
			0,
			255
		],
		[
			0,
			51,
			0
		],
		[
			0,
			51,
			51
		],
		[
			0,
			51,
			102
		],
		[
			0,
			51,
			153
		],
		[
			0,
			51,
			204
		],
		[
			0,
			51,
			255
		],
		[
			0,
			102,
			0
		],
		[
			0,
			102,
			51
		],
		[
			0,
			102,
			102
		],
		[
			0,
			102,
			153
		],
		[
			0,
			102,
			204
		],
		[
			0,
			102,
			255
		],
		[
			0,
			153,
			0
		],
		[
			0,
			153,
			51
		],
		[
			0,
			153,
			102
		],
		[
			0,
			153,
			153
		],
		[
			0,
			153,
			204
		],
		[
			0,
			153,
			255
		],
		[
			0,
			204,
			0
		],
		[
			0,
			204,
			51
		],
		[
			0,
			204,
			102
		],
		[
			0,
			204,
			153
		],
		[
			0,
			204,
			204
		],
		[
			0,
			204,
			255
		],
		[
			0,
			255,
			0
		],
		[
			0,
			255,
			51
		],
		[
			0,
			255,
			102
		],
		[
			0,
			255,
			153
		],
		[
			0,
			255,
			204
		],
		[
			0,
			255,
			255
		],
		[
			51,
			0,
			0
		],
		[
			51,
			0,
			51
		],
		[
			51,
			0,
			102
		],
		[
			51,
			0,
			153
		],
		[
			51,
			0,
			204
		],
		[
			51,
			0,
			255
		],
		[
			51,
			51,
			0
		],
		[
			51,
			51,
			51
		],
		[
			51,
			51,
			102
		],
		[
			51,
			51,
			153
		],
		[
			51,
			51,
			204
		],
		[
			51,
			51,
			255
		],
		[
			51,
			102,
			0
		],
		[
			51,
			102,
			51
		],
		[
			51,
			102,
			102
		],
		[
			51,
			102,
			153
		],
		[
			51,
			102,
			204
		],
		[
			51,
			102,
			255
		],
		[
			51,
			153,
			0
		],
		[
			51,
			153,
			51
		],
		[
			51,
			153,
			102
		],
		[
			51,
			153,
			153
		],
		[
			51,
			153,
			204
		],
		[
			51,
			153,
			255
		],
		[
			51,
			204,
			0
		],
		[
			51,
			204,
			51
		],
		[
			51,
			204,
			102
		],
		[
			51,
			204,
			153
		],
		[
			51,
			204,
			204
		],
		[
			51,
			204,
			255
		],
		[
			51,
			255,
			0
		],
		[
			51,
			255,
			51
		],
		[
			51,
			255,
			102
		],
		[
			51,
			255,
			153
		],
		[
			51,
			255,
			204
		],
		[
			51,
			255,
			255
		],
		[
			102,
			0,
			0
		],
		[
			102,
			0,
			51
		],
		[
			102,
			0,
			102
		],
		[
			102,
			0,
			153
		],
		[
			102,
			0,
			204
		],
		[
			102,
			0,
			255
		],
		[
			102,
			51,
			0
		],
		[
			102,
			51,
			51
		],
		[
			102,
			51,
			102
		],
		[
			102,
			51,
			153
		],
		[
			102,
			51,
			204
		],
		[
			102,
			51,
			255
		],
		[
			102,
			102,
			0
		],
		[
			102,
			102,
			51
		],
		[
			102,
			102,
			102
		],
		[
			102,
			102,
			153
		],
		[
			102,
			102,
			204
		],
		[
			102,
			102,
			255
		],
		[
			102,
			153,
			0
		],
		[
			102,
			153,
			51
		],
		[
			102,
			153,
			102
		],
		[
			102,
			153,
			153
		],
		[
			102,
			153,
			204
		],
		[
			102,
			153,
			255
		],
		[
			102,
			204,
			0
		],
		[
			102,
			204,
			51
		],
		[
			102,
			204,
			102
		],
		[
			102,
			204,
			153
		],
		[
			102,
			204,
			204
		],
		[
			102,
			204,
			255
		],
		[
			102,
			255,
			0
		],
		[
			102,
			255,
			51
		],
		[
			102,
			255,
			102
		],
		[
			102,
			255,
			153
		],
		[
			102,
			255,
			204
		],
		[
			102,
			255,
			255
		],
		[
			153,
			0,
			0
		],
		[
			153,
			0,
			51
		],
		[
			153,
			0,
			102
		],
		[
			153,
			0,
			153
		],
		[
			153,
			0,
			204
		],
		[
			153,
			0,
			255
		],
		[
			153,
			51,
			0
		],
		[
			153,
			51,
			51
		],
		[
			153,
			51,
			102
		],
		[
			153,
			51,
			153
		],
		[
			153,
			51,
			204
		],
		[
			153,
			51,
			255
		],
		[
			153,
			102,
			0
		],
		[
			153,
			102,
			51
		],
		[
			153,
			102,
			102
		],
		[
			153,
			102,
			153
		],
		[
			153,
			102,
			204
		],
		[
			153,
			102,
			255
		],
		[
			153,
			153,
			0
		],
		[
			153,
			153,
			51
		],
		[
			153,
			153,
			102
		],
		[
			153,
			153,
			153
		],
		[
			153,
			153,
			204
		],
		[
			153,
			153,
			255
		],
		[
			153,
			204,
			0
		],
		[
			153,
			204,
			51
		],
		[
			153,
			204,
			102
		],
		[
			153,
			204,
			153
		],
		[
			153,
			204,
			204
		],
		[
			153,
			204,
			255
		],
		[
			153,
			255,
			0
		],
		[
			153,
			255,
			51
		],
		[
			153,
			255,
			102
		],
		[
			153,
			255,
			153
		],
		[
			153,
			255,
			204
		],
		[
			153,
			255,
			255
		],
		[
			204,
			0,
			0
		],
		[
			204,
			0,
			51
		],
		[
			204,
			0,
			102
		],
		[
			204,
			0,
			153
		],
		[
			204,
			0,
			204
		],
		[
			204,
			0,
			255
		],
		[
			204,
			51,
			0
		],
		[
			204,
			51,
			51
		],
		[
			204,
			51,
			102
		],
		[
			204,
			51,
			153
		],
		[
			204,
			51,
			204
		],
		[
			204,
			51,
			255
		],
		[
			204,
			102,
			0
		],
		[
			204,
			102,
			51
		],
		[
			204,
			102,
			102
		],
		[
			204,
			102,
			153
		],
		[
			204,
			102,
			204
		],
		[
			204,
			102,
			255
		],
		[
			204,
			153,
			0
		],
		[
			204,
			153,
			51
		],
		[
			204,
			153,
			102
		],
		[
			204,
			153,
			153
		],
		[
			204,
			153,
			204
		],
		[
			204,
			153,
			255
		],
		[
			204,
			204,
			0
		],
		[
			204,
			204,
			51
		],
		[
			204,
			204,
			102
		],
		[
			204,
			204,
			153
		],
		[
			204,
			204,
			204
		],
		[
			204,
			204,
			255
		],
		[
			204,
			255,
			0
		],
		[
			204,
			255,
			51
		],
		[
			204,
			255,
			102
		],
		[
			204,
			255,
			153
		],
		[
			204,
			255,
			204
		],
		[
			204,
			255,
			255
		],
		[
			255,
			0,
			0
		],
		[
			255,
			0,
			51
		],
		[
			255,
			0,
			102
		],
		[
			255,
			0,
			153
		],
		[
			255,
			0,
			204
		],
		[
			255,
			0,
			255
		],
		[
			255,
			51,
			0
		],
		[
			255,
			51,
			51
		],
		[
			255,
			51,
			102
		],
		[
			255,
			51,
			153
		],
		[
			255,
			51,
			204
		],
		[
			255,
			51,
			255
		],
		[
			255,
			102,
			0
		],
		[
			255,
			102,
			51
		],
		[
			255,
			102,
			102
		],
		[
			255,
			102,
			153
		],
		[
			255,
			102,
			204
		],
		[
			255,
			102,
			255
		],
		[
			255,
			153,
			0
		],
		[
			255,
			153,
			51
		],
		[
			255,
			153,
			102
		],
		[
			255,
			153,
			153
		],
		[
			255,
			153,
			204
		],
		[
			255,
			153,
			255
		],
		[
			255,
			204,
			0
		],
		[
			255,
			204,
			51
		],
		[
			255,
			204,
			102
		],
		[
			255,
			204,
			153
		],
		[
			255,
			204,
			204
		],
		[
			255,
			204,
			255
		],
		[
			255,
			255,
			0
		],
		[
			255,
			255,
			51
		],
		[
			255,
			255,
			102
		],
		[
			255,
			255,
			153
		],
		[
			255,
			255,
			204
		],
		[
			255,
			255,
			255
		],

		[
			234,234,234
		],
		[
			212,
			212,
			212
		],
		[
			191,191,191
		],
		[
			170,
			170,
			170
		],
		[
			149,149,149
		],
		[
			128,
			128,
			128
		],
		[
			106,106,106
		],
		[
			85,
			85,
			85
		],
		[
			64,64,64
		],
		[
			43,
			43,
			43
		],
		[
			21,21,21
		],
	]
};